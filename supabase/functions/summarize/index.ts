import { serve } from 'https://deno.land/std@0.177.0/http/server.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
}

const OPENAI_API_KEY = Deno.env.get("OPENAI_API_KEY");

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    console.log('üìù Received request:', req.method)
    const { prompt } = await req.json()
    console.log('üéØ Prompt received:', prompt)
    
    if (!OPENAI_API_KEY) {
      console.error('‚ùå Missing OpenAI API key')
      throw new Error('Missing OpenAI API key')
    }

    console.log('üîÑ Calling OpenAI API...')
    const systemPrompt = `You are a legal analysis AI. Analyze the given event and provide a clear summary with the following sections:

Main event narrative:
[A clear description of what happened]

Participants:
- [List each participant]

Key Events:
- [List key events chronologically]

Context:
[Location and time information]

Notable Quotes:
- [Any important quotes from the video]

Legal Relevance:
[Assessment of legal, HR, or safety implications]`;

    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: prompt }
        ],
        temperature: 0.7,
      }),
    });

    if (!openaiRes.ok) {
      const error = await openaiRes.text();
      console.error('‚ùå OpenAI API error:', openaiRes.status, error)
      return new Response(JSON.stringify({ error }), { 
        status: openaiRes.status,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    const data = await openaiRes.json();
    const summaryText = data.choices?.[0]?.message?.content;

    if (!summaryText) {
      throw new Error('No summary generated by OpenAI')
    }

    console.log('‚úÖ Summary generated successfully')
    console.log('Summary text:', summaryText)

    // Parse the summary into structured data
    const summaryData = {
      summary: summaryText,
      context: {
        location: null,  // Will be filled by frontend geolocation
        time: new Date().toLocaleString()
      },
      reportRelevance: {
        legal: summaryText.toLowerCase().includes('legal'),
        hr: summaryText.toLowerCase().includes('hr') || summaryText.toLowerCase().includes('human resources'),
        safety: summaryText.toLowerCase().includes('safety') || summaryText.toLowerCase().includes('hazard'),
        explanation: summaryText.split('Legal Relevance:')[1]?.trim() || 'Requires documentation and follow-up'
      }
    }
    
    console.log('Returning summary data:', summaryData)

    return new Response(JSON.stringify(summaryData), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (err) {
    console.error('‚ùå Function error:', err.message)
    return new Response(JSON.stringify({ error: err.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})
