// WARNING: This file is deprecated and should not be imported or used anywhere.
// All logic has been moved to app/lib/supabase.ts using safe patterns.
// If you see this file imported, please remove the import and use the new pattern.

/*
import { createClient } from '@supabase/supabase-js';

// Types for our database
type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];
*/

interface Database {
  public: {
    Tables: {
      recordings: {
        Row: {
          id: string;
          created_at: string;
          title: string;
          duration: number;
          storage_path: string;
          transcript: string | null;
        };
        Insert: {
          id?: string;
          created_at?: string;
          title: string;
          duration: number;
          storage_path: string;
          transcript?: string | null;
        };
      };
      summaries: {
        Row: {
          id: string;
          recording_id: string;
          created_at: string;
          content: string;
          keywords: string[];
        };
        Insert: {
          id?: string;
          recording_id: string;
          created_at?: string;
          content: string;
          keywords: string[];
        };
      };
      reports: {
        Row: {
          id: string;
          recording_id: string;
          summary_id: string;
          created_at: string;
          pdf_url: string;
          metadata: {
            title: string;
            generated_at: string;
            page_count: number;
          };
        };
        Insert: {
          id?: string;
          recording_id: string;
          summary_id: string;
          created_at?: string;
          pdf_url: string;
          metadata: {
            title: string;
            generated_at: string;
            page_count: number;
          };
        };
      };
    };
  };
}

// ─────────────────────────────────────────────
// 🔧 Helper Functions
// ─────────────────────────────────────────────

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('❌ Missing Supabase environment variables');
  throw new Error('Supabase configuration is missing. Please check your environment variables.');
}

console.log('✅ Initializing Supabase client...');
export const supabase = createClient(supabaseUrl, supabaseKey);

export async function saveRecording(blob: Blob, title: string): Promise<Database['public']['Tables']['recordings']['Row'] | null> {
  try {
    const filename = `${Date.now()}-${title}.webm`;

    const { data: storageData, error: storageError } = await supabase.storage
      .from('recordings')
      .upload(filename, blob);

    if (storageError) throw storageError;

    const { data, error: dbError } = await supabase
      .from('recordings')
      .insert({
        title,
        storage_path: storageData.path,
        duration: 0, // TODO: Calculate actual duration
      })
      .select()
      .single();

    if (dbError) throw dbError;
    return data;
  } catch (error) {
    console.error('Error saving recording:', error);
    return null;
  }
}

export async function saveSummary(recordingId: string, content: string, keywords: string[]): Promise<Database['public']['Tables']['summaries']['Row'] | null> {
  try {
    const { data, error } = await supabase
      .from('summaries')
      .insert({
        recording_id: recordingId,
        content,
        keywords,
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error('Error saving summary:', error);
    return null;
  }
}

export async function saveReport(
  recordingId: string,
  summaryId: string,
  pdfUrl: string,
  metadata: Database['public']['Tables']['reports']['Row']['metadata']
): Promise<Database['public']['Tables']['reports']['Row'] | null> {
  try {
    const { data, error } = await supabase
      .from('reports')
      .insert({
        recording_id: recordingId,
        summary_id: summaryId,
        pdf_url: pdfUrl,
        metadata,
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error('Error saving report:', error);
    return null;
  }
}
